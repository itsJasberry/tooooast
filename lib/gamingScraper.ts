import axios from 'axios';
import { load } from 'cheerio';
import { createClient } from '@supabase/supabase-js';
import { format } from 'date-fns';
import * as dotenv from 'dotenv';
import slugify from 'slugify';

// Load environment variables from .env file
dotenv.config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const deepseekApiKey = process.env.DEEPSEEK_API_KEY;

if (!supabaseUrl || !supabaseKey) {
  throw new Error('Missing Supabase URL or Anon Key in environment variables');
}

if (!deepseekApiKey) {
  console.warn('\n\u26A0\uFE0F UWAGA: Brak klucza DeepSeek API. T\u0142umaczenie artyku\u0142\u00F3w nie b\u0119dzie dzia\u0142a\u0107!');
  console.warn('Dodaj DEEPSEEK_API_KEY do pliku .env');
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Definicje kategorii i s≈Ç√≥w kluczowych
const CATEGORIES = {
  GAME: 'Game',
  MOVIE: 'Movie',
  TV_SHOW: 'TV Show',
  COMIC: 'Comic',
  TECH: 'Tech',
  OTHER: 'Other',
} as const;

type CategoryKeys = keyof typeof CATEGORIES;
type CategoryValues = typeof CATEGORIES[CategoryKeys];

const CATEGORY_KEYWORDS: Record<CategoryValues, string[]> = {
  [CATEGORIES.GAME]: [
    // Og√≥lne i platformowe - wzmocnione
    'gra', 'game', 'gaming', 'gra wideo', 'video game', 'gamer', 'gracz', 'tytu≈Ç', 'release', 'premiera', 'gameplay', 'developer', 'wydawca', 'publisher',
    'rpg', 'fps', 'strategia', 'strategy', 'symulator', 'simulator', 'przygodowa', 'adventure', 'akcji', 'action', 'sportowa', 'sports', 'wy≈õcigowa', 'racing', 'logiczna', 'puzzle', 'platformowa', 'platformer', 'indie game', 'gra niezale≈ºna', 'gra akcji', 'gra fabularna', 'gra strategiczna',
    'playstation', 'ps5', 'ps4', 'ps3', 'ps2', 'ps1', 'sony', 'dualshock', 'dualsense', 'ps vr', 'konsola sony',
    'xbox', 'microsoft', 'series x', 'series s', 'one', '360', 'game pass', 'kinect', 'konsola xbox',
    'nintendo', 'switch', 'wii', 'wii u', 'ds', '3ds', 'mario', 'zelda', 'pokemon', 'joy-con', 'konsola nintendo',
    'pc', 'steam', 'epic games', 'origin', 'ubisoft connect', 'gog', 'komputer gamingowy', 'gaming pc',
    'mobile', 'mobilna', 'android', 'ios', 'smartfon', 'tablet', 'gra mobilna', 'mobile game', 'app store', 'google play', 'gra na telefon',
    'esport', 'e-sport', 'turniej', 'tournament', 'zawody', 'competition', 'gracz profesjonalny', 'pro player', 'iem', 'esl', 'dreamhack', 'liga', 'mistrzostwa',
    'gry', 'games', 'rozrywka cyfrowa', 'digital entertainment', '≈õwiat gier', 'bran≈ºa gier',
    // Dodane konkretne tytu≈Çy gier i terminy z przyk≈Çad√≥w
    'fortnite', 'minecraft', 'capcom fighting collection', 'capcom', 'Capcom', 'fighting collection', 'collection 2', // Dodane warianty
    'world of warcraft', 'league of legends', 'cs:go', 'dota 2', 'valorant', 'starcraft', 'overwatch', 'fifa', 'cyberpunk 2077', 'wied≈∫min', 'the witcher', 'grand theft auto', 'gta', 'call of duty', 'assassin\'s creed', 'elden ring', 'horizon forbidden west',
    'silnik gry', 'game engine', 'patch', 'aktualizacja', 'update', 'dodatek', 'dlc', 'ekspansja', 'expansion', 'sezon', 'season', 'przepustka bojowa', 'battle pass',
    'mechanika gry', 'game mechanics', 'tryb gry', 'game mode', 'wielu graczy', 'multiplayer', 'singleplayer', 'kampania', 'campaign', 'fabu≈Ça', 'story',
    'przetrwanie', 'survival', 'budowanie', 'building', '≈õwiat gry', 'game world', 'mapa', 'map', 'poziom', 'level'
  ],
  [CATEGORIES.MOVIE]: [
    'film', 'kino', 'movie', 'cinema', 're≈ºyser', 'director', 'aktor', 'aktorka', 'actor', 'actress', 'premiera kinowa', 'theatrical release', 'box office', 'produkcja filmowa', 'film production', 'seans', 'screening', 'gatunek filmowy', 'movie genre',
    // Dodane terminy zwiƒÖzane z filmem i serialem, kt√≥re mogƒÖ pojawiƒá siƒô w crossoverach
    'star wars', 'gwiezdne wojny', 'darth vader', 'imperium', 'rebelia', 'jedi', 'sith', 'saga', 'trylogia', 'disney', 'lucasfilm',
    'marvel cinematic universe', 'mcu', 'dc extended universe', 'dceu', 'superbohater', 'superhero', 'komiksowy', 'based on comic' // Dopasowanie do film√≥w/seriali na podstawie komiks√≥w
  ],
  [CATEGORIES.TV_SHOW]: [
    'serial', 'tv show', 'netflix', 'hbo', 'disney+', 'amazon prime', 'sezon', 'season', 'odcinek', 'episode', 'streaming', 'platforma streamingowa', 'streaming platform', 'produkcja telewizyjna', 'tv production', 'serial telewizyjny',
    // Dodane terminy zwiƒÖzane z serialem, kt√≥re mogƒÖ pojawiƒá siƒô w crossoverach
    'star wars', 'gwiezdne wojny', 'darth vader', 'mandolorian', 'andor', 'ahsoka',
    'serial animowany', 'animated series', 'serial dokumentalny', 'documentary series', 'serial komediowy', 'comedy series', 'serial dramatyczny', 'drama series'
  ],
  [CATEGORIES.COMIC]: [
    'komiks', 'comic', 'marvel', 'dc', 'image comics', 'dark horse', 'manga', 'graphic novel', 'wydawnictwo komiksowe', 'comic book publisher', 'postaƒá komiksowa', 'comic character', 'rysownik', 'scenarzysta', 'artist', 'writer', 'superbohater', 'superhero', 'powie≈õƒá graficzna',
    'wydanie', 'zeszyt', 'tom', 'seria komiksowa', 'comic series', 'album komiksowy', 'manga', 'shonen', 'shojo', 'seinen', 'josei',
    // Dodane terminy, kt√≥re mogƒÖ pojawiƒá siƒô w kontek≈õcie komiks√≥w
    'historia obrazkowa', 'sztuka komiksu', 'kolekcja komiks√≥w'
  ],
  [CATEGORIES.TECH]: [
    // Rozszerzone o szersze terminy techniczne, mniej specyficzne dla gier (choƒá overlap jest)
    'technologia', 'technology', 'tech', 'gad≈ºet', 'gadget', 'innowacje', 'innovation', 'przysz≈Ço≈õƒá technologii', 'future of tech',
    'hardware', 'sprzƒôt', 'software', 'oprogramowanie', 'system', 'aplikacja', 'app', 'program', 'narzƒôdzie', 'tool',
    'komputer', 'computer', 'laptop', 'desktop', 'serwer', 'server', 'centrum danych', 'data center',
    'procesor', 'processor', 'cpu', 'karta graficzna', 'graphics card', 'gpu', 'ram', 'pamiƒôƒá ram', 'dysk ssd', 'ssd', 'dysk hdd', 'hdd', 'p≈Çyta g≈Ç√≥wna', 'motherboard', 'zasilacz', 'power supply', 'ch≈Çodzenie', 'cooling',
    'internet', 'sieƒá', 'network', 'wi-fi', '5g', '6g', 'lte', '≈õwiat≈Çow√≥d', 'fiber', 'po≈ÇƒÖczenie', 'connection', 'pasmo', 'bandwidth', 'router', 'modem',
    'system operacyjny', 'operating system', 'windows', 'macos', 'linux', 'android', 'ios',
    'ai', 'sztuczna inteligencja', 'artificial intelligence', 'uczenie maszynowe', 'machine learning', 'g≈Çƒôbokie uczenie', 'deep learning', 'sieci neuronowe', 'neural networks', 'przetwarzanie jƒôzyka naturalnego', 'nlp',
    'vr', 'rzeczywisto≈õƒá wirtualna', 'virtual reality', 'ar', 'rzeczywisto≈õƒá rozszerzona', 'augmented reality', 'xr', 'mixed reality',
    'it', 'informatyka', 'cyberbezpiecze≈Ñstwo', 'cybersecurity', 'dane', 'data', 'big data', 'analiza danych', 'data analysis',
    'chmura', 'cloud', 'przetwarzanie w chmurze', 'cloud computing', 'us≈Çugi chmurowe', 'cloud services',
    'elektronika', 'electronics', 'urzƒÖdzenie', 'device', 'smart home', 'inteligentny dom', 'noszone technologie', 'wearable tech', 'internet rzeczy', 'iot', 'czujnik', 'sensor',
    'programowanie', 'programming', 'development', 'developer', 'kod', 'code', 'jƒôzyk programowania', 'programming language', 'framework', 'biblioteka', 'library', 'algorytm', 'algorithm',
    'robotyka', 'robotics', 'automatyka', 'automation', 'druk 3d', '3d printing',
    'blockchain', 'kryptowaluty', 'cryptocurrency', 'nft', 'token', 'web3',
    'cyfrowy', 'digital', 'transformacja cyfrowa', 'digital transformation', 'prywatno≈õƒá', 'privacy', 'bezpiecze≈Ñstwo', 'security', 'infrastruktura', 'infrastructure'
  ],
  [CATEGORIES.OTHER]: ['inne', 'other', 'pozosta≈Çe'] // Doda≈Çem 'pozosta≈Çe'
};

// Funkcja do okre≈õlania kategorii
async function getCategory(title: string, content: string): Promise<CategoryValues> {
  try {
    const combinedText = `${title.toLowerCase()} ${content.toLowerCase()}`;
    
    // Najpierw sprawd≈∫ kategorie, kt√≥re majƒÖ priorytet
    const priorityCategories = [
      CATEGORIES.GAME, // G≈Ç√≥wna kategoria dla tre≈õci gamingowych
      CATEGORIES.MOVIE,
      CATEGORIES.TV_SHOW,
      CATEGORIES.COMIC
    ] as const;

    // Najpierw sprawd≈∫ czy to na pewno nie jest tre≈õƒá gamingowa
    const isGamingContent = CATEGORY_KEYWORDS[CATEGORIES.GAME].some(keyword => {
      const keywordLower = keyword.toLowerCase();
      // Sprawd≈∫ czy s≈Çowo kluczowe wystƒôpuje w kontek≈õcie gamingowym
      if (combinedText.includes(keywordLower)) {
        // Sprawd≈∫ czy to nie jest fa≈Çszywy pozytyw (np. "film o graczach")
        const context = combinedText.substring(
          Math.max(0, combinedText.indexOf(keywordLower) - 30),
          Math.min(combinedText.length, combinedText.indexOf(keywordLower) + keywordLower.length + 30)
        );
        
        // Wyklucz typowe fa≈Çszywe pozytywy
        const falsePositives = ['film', 'movie', 'serial', 'show', 'comic', 'komiks'];
        if (falsePositives.some(fp => context.includes(fp))) {
          return false;
        }
        return true;
      }
      return false;
    });

    if (isGamingContent) {
      console.log(`üéÆ Zidentyfikowano tre≈õƒá gamingowƒÖ na podstawie s≈Ç√≥w kluczowych`);
      return CATEGORIES.GAME;
    }

    // Sprawd≈∫ inne kategorie z priorytetem
    for (const category of priorityCategories.filter(c => c !== CATEGORIES.GAME)) {
      if (CATEGORY_KEYWORDS[category as keyof typeof CATEGORY_KEYWORDS].some((keyword: string) => 
        combinedText.includes(keyword.toLowerCase())
      )) {
        console.log(`üìΩÔ∏è Zidentyfikowano kategoriƒô ${category} na podstawie s≈Ç√≥w kluczowych`);
        return category;
      }
    }

    // Sprawd≈∫ pozosta≈Çe kategorie
    for (const [category, keywords] of Object.entries(CATEGORY_KEYWORDS)) {
      if (priorityCategories.includes(category as CategoryValues)) {
        continue;
      }
      
      if ((keywords as string[]).some(keyword => 
        combinedText.includes(keyword.toLowerCase())
      )) {
        console.log(`üè∑Ô∏è Zidentyfikowano kategoriƒô ${category} na podstawie s≈Ç√≥w kluczowych`);
        return category as CategoryValues;
      }
    }

    // Je≈õli nie mo≈ºemy jednoznacznie okre≈õliƒá kategorii, u≈ºyj DeepSeek
    if (deepseekApiKey) {
      try {
        console.log('ü§ñ U≈ºywam DeepSeek do okre≈õlenia kategorii...');
        const response = await axios.post(
          'https://api.deepseek.com/chat/completions',
          {
            model: 'deepseek-chat',
            messages: [
              {
                role: 'system',
                content: `Zaklasyfikuj poni≈ºszy artyku≈Ç do jednej z kategorii: ${Object.values(CATEGORIES).join(', ')}. 
                Odpowiedz tylko nazwƒÖ kategorii, nic wiƒôcej.`
              },
              {
                role: 'user',
                content: `Tytu≈Ç: ${title}\n\n${content.substring(0, 1000)}...`
              }
            ],
            temperature: 0.3,
            max_tokens: 50
          },
          {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${deepseekApiKey}`
            },
            timeout: 10000 // 10 sekund timeout
          }
        );

        const aiCategory = response.data.choices[0]?.message?.content?.trim();
        
        if (aiCategory) {
          console.log(`ü§ñ DeepSeek zasugerowa≈Ç kategoriƒô: ${aiCategory}`);
          
          // Sprawd≈∫ czy odpowied≈∫ to poprawna kategoria
          const validCategories = Object.values(CATEGORIES) as string[];
          if (validCategories.includes(aiCategory)) {
            return aiCategory as CategoryValues;
          }
        }
      } catch (error) {
        console.error('‚ùå B≈ÇƒÖd podczas korzystania z DeepSeek do kategoryzacji:', error);
        // Kontynuuj do domy≈õlnej kategorii
      }
    }

    // Domy≈õlna kategoria
    return CATEGORIES.OTHER;
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas okre≈õlania kategorii:', error);
    return CATEGORIES.OTHER;
  }
}

interface GamingArticleData {
  title: string;
  content: string;
  source: string;
  url: string;
  published_at?: string;
  title_pl?: string;
  content_pl?: string;
  slug_en?: string;
  slug_pl?: string;
  category: CategoryValues; // Nowe pole dla kategorii
}

interface ScrapedArticle {
  title: string;
  url: string;
  content?: string;
}

interface DeepSeekResponse {
  title: string;
  content: string;
}

async function paraphraseAndFormatEnglishWithDeepSeek(
  title: string,
  content: string
): Promise<DeepSeekResponse | null> {
  if (!deepseekApiKey) {
    console.error('‚ùå DEEPSEEK_API_KEY is not set in environment variables.');
    return null;
  }

  const maxLength = 12000;
  const trimmedContent = content.length > maxLength ? content.substring(0, maxLength) + "..." : content;

  const prompt = `
    You are a professional copywriter and editor specializing in gaming articles.
    Your task is to paraphrase and reformat the following English article title and content to make it highly engaging and well-structured.

    TITLE PARAPHRASING RULES:
    - Create a completely new title that captures the essence but uses different words and structure
    - Use synonyms and different sentence structures
    - Change the voice (active/passive) if possible
    - Consider different angles or perspectives
    - Keep it concise (under 80 characters)
    - Make it attention-grabbing and click-worthy
    - The new title should be significantly different from the original
    
    Examples:
    Original: "New Zelda Game Announced for Nintendo Switch"
    Good: "Nintendo Unveils Latest Zelda Adventure for Switch"
    
    Original: "Call of Duty Breaks Sales Records"
    Good: "Record-Breaking Launch for Latest Call of Duty Title"

    YOUR MAIN TASKS:
    1. Create a completely new, unique title following the rules above
    2. Paraphrase the content to be more engaging and dynamic, avoiding overly literal restatement.
    3. Focus on the most important information. Paraphrase to be engaging, but try to retain all significant details from the original article.

    TEXT FORMATTING RULES:
    1. Divide the text into short, readable paragraphs (2-4 sentences each).
    2. Use indentations and paragraphs to improve readability.
    3. Add 3-5 relevant emojis throughout the text to liven it up.
    4. Use subheadings if the article discusses different aspects of the topic (enclose subheadings in asterisks, e.g., *New Features*).
    5. You can highlight the most important information by adding an emoji at the beginning of the sentence. 
    6. Conclude the article with a brief summary or conclusion.
    7. For lists, use hyphens as list markers.
    8. Ensure the text is coherent and logical, with sentences flowing smoothly.
    9. Omit any reader comments, links to other articles, or website interface elements.

    Example of well-formatted output (note the title format):
    
    Cosmic Odyssey: Next-Gen Space Exploration Awaits
    
    The new game 'Cosmic Adventure' hits the market next month! Players will explore vast galaxies full of undiscovered planets.

    *Innovative Gameplay*

    The game developers have implemented a brand-new combat system, combining strategy elements with dynamic action. Controlling your spaceship has never been so intuitive.

    During gameplay, you'll be able to:
    - Discover new planets
    - Make contact with alien civilizations
    - Participate in epic space battles
    
    [Note: The rest of the article continues with the same format as before...]

    Original Title: ${title}

    Original Content: ${trimmedContent}
  `;

  try {
    console.log('üìù Paraphrasing English article using DeepSeek API...');
    const response = await axios.post(
      'https://api.deepseek.com/chat/completions',
      {
        model: 'deepseek-chat',
        messages: [
          { role: 'system', content: 'You are a helpful assistant.' },
          { role: 'user', content: prompt },
        ],
        temperature: 0.7,
        max_tokens: 2048,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${deepseekApiKey}`,
        },
      }
    );

    const resultText = response.data.choices[0].message.content;
    const titleMatch = resultText.match(/Title: (.*)/);
    const newTitle = titleMatch && titleMatch[1] ? titleMatch[1].trim() : title;

    let newContent = resultText;
    if (titleMatch) {
      newContent = newContent.replace(titleMatch[0], '').trim();
    }

    if (!newContent.includes(trimmedContent.substring(0,50)) && resultText.length > 100) {
        const lines = resultText.split('\n');
        if (lines.length > 2 && lines[1].trim() === '') { 
            newContent = lines.slice(2).join('\n').trim();
        } else {
            newContent = resultText.substring(resultText.indexOf("\n\n") + 2).trim(); 
            if (!newContent || newContent.length < 50) newContent = resultText;
        }
    }

    console.log('‚úÖ English article paraphrased and formatted.');
    return { title: newTitle, content: newContent };

  } catch (error: any) {
    console.error('‚ùå Error paraphrasing English article with DeepSeek:', error.response?.data || error.message);
    return null;
  }
}

async function translateAndParaphraseToPolishWithDeepSeek(
  title: string,
  content: string
): Promise<DeepSeekResponse | null> {
  if (!deepseekApiKey) {
    console.error('‚ùå DEEPSEEK_API_KEY is not set in environment variables.');
    return null;
  }

  const maxLength = 12000;
  const trimmedContent = content.length > maxLength ? content.substring(0, maxLength) + "..." : content;

  try {
    console.log('\nüîé T≈Çumaczenie artyku≈Çu za pomocƒÖ DeepSeek API...');
    const response = await axios.post(
      'https://api.deepseek.com/chat/completions',
      {
        model: 'deepseek-chat',
        messages: [
          { 
            role: 'system', 
            content: 'Jeste≈õ profesjonalnym t≈Çumaczem i redaktorem specjalizujƒÖcym siƒô w tekstach gamingowych. Twoim zadaniem jest przet≈Çumaczenie i sformatowanie tekstu na jƒôzyk polski.' 
          },
          { 
            role: 'user', 
            content: `Przet≈Çumacz na jƒôzyk polski i sformatuj nastƒôpujƒÖcy artyku≈Ç, zachowujƒÖc znaczenie i styl:
            
Tytu≈Ç: ${title}

Tre≈õƒá: ${trimmedContent}

Zwr√≥ƒá odpowied≈∫ w formacie JSON:
{
  "title_pl": "Przet≈Çumaczony tytu≈Ç",
  "content_pl": "Przet≈Çumaczona i sformatowana tre≈õƒá"
}`
          }
        ],
        temperature: 0.7,
        max_tokens: 2000
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${deepseekApiKey}`
        }
      }
    );

    const responseText = response.data.choices[0].message.content;
    console.log('‚úÖ Otrzymano odpowied≈∫ z DeepSeek API');
    
    // Usu≈Ñ ewentualne znaki nowej linii i bia≈Çe znaki z poczƒÖtku i ko≈Ñca
    let cleanedResponse = responseText.trim();
    
    // Usu≈Ñ otaczajƒÖce markdown code block (```json i ```)
    cleanedResponse = cleanedResponse.replace(/^```(?:json)?\s*([\s\S]*?)\s*```$/, '$1');
    
    console.log('Oczyszczona odpowied≈∫:', cleanedResponse.substring(0, 100) + '...');

    try {
      // Spr√≥buj sparsowaƒá odpowied≈∫ jako JSON
      const result = JSON.parse(cleanedResponse) as { title_pl: string; content_pl: string };
      return {
        title: result.title_pl,
        content: result.content_pl
      };
    } catch (parseError) {
      console.error('B≈ÇƒÖd parsowania odpowiedzi JSON z DeepSeek:', parseError);
      console.error('Pe≈Çna odpowied≈∫:', cleanedResponse);
      
      // Je≈õli nie uda≈Ço siƒô sparsowaƒá JSON, spr√≥buj wyciƒÖgnƒÖƒá tytu≈Ç i tre≈õƒá z odpowiedzi
      const titleMatch = cleanedResponse.match(/"title_pl":\s*"([^"]+)"/i) || 
                        cleanedResponse.match(/Tytu≈Ç:\s*([^\n]+)/i);
      const contentMatch = cleanedResponse.match(/"content_pl":\s*"([\s\S]*?)"(?=,\s*"|}$)/i) || 
                          cleanedResponse.match(/Tre≈õƒá:\s*([\s\S]*)/i);
      
      if (titleMatch && contentMatch) {
        return {
          title: titleMatch[1].trim(),
          content: contentMatch[1].trim()
        };
      }
      
      // Je≈õli nadal nie uda≈Ço siƒô wyciƒÖgnƒÖƒá danych, zwr√≥ƒá oryginalny tekst
      console.warn('Nie uda≈Ço siƒô wyodrƒôbniƒá przet≈Çumaczonej tre≈õci, zwracam orygina≈Ç');
      return {
        title: title,
        content: content
      };
    }
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd podczas t≈Çumaczenia z DeepSeek API:', error);
    return null;
  }
}

async function getExistingGamingArticle(url: string) {
  console.log(`\nüîç Sprawdzam czy artyku≈Ç gaming ju≈º istnieje: ${url}`);
  try {
    const { data, error } = await supabase
      .from('gaming_articles')
      .select('*')
      .eq('url', url)
      .single();

    if (error) {
      if (error.code === 'PGRST116') { // No rows found
        console.log('‚ÑπÔ∏è Artyku≈Ç gaming nie istnieje w bazie, dodawanie...');
        return null;
      }
      console.error('‚ùå B≈ÇƒÖd podczas sprawdzania artyku≈Çu gaming:');
      console.error('Kod b≈Çƒôdu:', error.code);
      console.error('Wiadomo≈õƒá:', error.message);
      console.error('Szczeg√≥≈Çy:', error.details || 'Brak dodatkowych szczeg√≥≈Ç√≥w');
      
      throw error;
    }
    
    console.log('‚úÖ Artyku≈Ç gaming ju≈º istnieje w bazie, pomijam. ID:', data.id);
    return data;
  } catch (error: any) {
    console.error('‚ùå Nieoczekiwany b≈ÇƒÖd podczas sprawdzania artyku≈Çu gaming:');
    console.error(error);
    throw error;
  }
}

async function saveGamingArticle(
  articleData: GamingArticleData & { title_length?: number; content_length?: number }
): Promise<any> {
  const { title_length, content_length, ...insertData } = articleData;
  console.log(`
üíæ Zapisujƒô artyku≈Ç do bazy danych: ${insertData.title}`);
  console.log(`   Kategoria: ${insertData.category}`);
  // Logika dodajƒÖca articleData do bazy Supabase
  // Upewnij siƒô, ≈ºe tabela 'gaming_articles' ma kolumnƒô 'category'
  const { data, error } = await supabase
    .from('gaming_articles')
    .insert([insertData]);

  if (error) {
    console.error('‚ùå B≈ÇƒÖd podczas zapisu artyku≈Çu gamingowego do Supabase:', error.message);
    console.error('Szczeg√≥≈Çy b≈Çƒôdu:', error.details);
    console.error('Dane artyku≈Çu:', insertData);
    // Dodatkowe logowanie specyficzne dla b≈Çƒôd√≥w Supabase
    if (error.code) console.error('Kod b≈Çƒôdu Supabase:', error.code);
    if (error.hint) console.error('Podpowied≈∫ Supabase:', error.hint);
    throw error;
  }

  console.log('‚úÖ Artyku≈Ç gamingowy zapisany pomy≈õlnie:', data);
  return data;
}

async function scrapeGamingArticle(url: string, source: string): Promise<GamingArticleData | null> {
  console.log(`
üîó Scrapujƒô artyku≈Ç: ${url} ze ≈∫r√≥d≈Ça: ${source}`);
  
  try {
    console.log(`\nüìÑ Przetwarzam artyku≈Ç gaming: ${url}`);
    const { data: html } = await axios.get(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
      },
    });
    const $ = load(html);

    let title = '';
    let content = '';
    let published_at: string | undefined = undefined;

    // Pr√≥ba znalezienia tytu≈Çu
    const titleSelectors = [
      'h1.entry-title',
      'h1.title',
      'h1.post-title',
      'h1.article-title',
      'h1.story-title',
      'header h1',
      'h1',
      'meta[property="og:title"]',
      'title'
    ];

    for (const selector of titleSelectors) {
      if (selector === 'meta[property="og:title"]') {
        title = $(selector).attr('content')?.trim() || '';
      } else if (selector === 'title') {
        title = $(selector).text()?.trim() || '';
      } else {
        title = $(selector).first().text()?.trim() || '';
      }
      if (title) break;
    }

    // Pr√≥ba znalezienia tre≈õci
    const contentSelectors = [
      'div.article-content',
      'div.entry-content',
      'div.post-content',
      'div.story-content',
      'article .content',
      'div.content',
      'article',
      'section.content-main'
    ];
    
    for (const selector of contentSelectors) {
      content = $(selector).first().text()?.trim() || '';
      if (content) break;
    }

    if (!title || !content) {
      console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô pobraƒá tytu≈Çu lub tre≈õci. Mo≈ºliwe, ≈ºe strona ma innƒÖ strukturƒô HTML lub blokuje dostƒôp.');
      if (!title) console.log('Tytu≈Ç pusty.');
      if (!content) console.log('Tre≈õƒá pusta.');
      return null;
    }



    // Okre≈õlanie kategorii
    const category = await getCategory(title, content);

    // Parafraza i formatowanie angielskiej wersji
    console.log('\nüîÑ Rozpoczynam parafrazƒô i formatowanie angielskiej wersji...');
    const paraphrasedEnglish = await paraphraseAndFormatEnglishWithDeepSeek(title, content);
    if (!paraphrasedEnglish || !paraphrasedEnglish.title || !paraphrasedEnglish.content) {
      console.error('‚ùå Nie uda≈Ço siƒô sparafrazowaƒá angielskiej wersji.');
      return null;
    }
    const finalTitleEn = (paraphrasedEnglish.title); 
    const finalContentEn = (paraphrasedEnglish.content); 

    // T≈Çumaczenie i parafraza na polski
    console.log('\nüîÑ Rozpoczynam t≈Çumaczenie i parafrazƒô na jƒôzyk polski...');
    const translatedPolish = await translateAndParaphraseToPolishWithDeepSeek(paraphrasedEnglish.title, paraphrasedEnglish.content);
    if (!translatedPolish || !translatedPolish.title || !translatedPolish.content) {
      console.error('‚ùå Nie uda≈Ço siƒô przet≈Çumaczyƒá na polski.');
      return null;
    }
    const finalTitlePl = (translatedPolish.title); 
    const finalContentPl = (translatedPolish.content); 

    // Pr√≥ba znalezienia daty publikacji
    const dateSelectors = [
      'meta[property="article:published_time"]', 
      'time[itemprop="datePublished"]',
      'span.date',
      'div.published-date',
      'p.date-info'
    ];

    for (const selector of dateSelectors) {
      let dateStr = '';
      if (selector.startsWith('meta')) {
        dateStr = $(selector).attr('content') || '';
      } else {
        dateStr = $(selector).first().text().trim();
        if (!dateStr) {
           dateStr = $(selector).first().attr('datetime') || '';
        }
      }

      if (dateStr) {
        try {
          // Pr√≥ba konwersji na standardowy format ISO, je≈õli to mo≈ºliwe
          // date-fns mo≈ºe mieƒá problemy z niekt√≥rymi formatami, wiƒôc potrzebna jest ostro≈ºno≈õƒá
          const parsedDate = new Date(dateStr);
          if (!isNaN(parsedDate.getTime())) {
            published_at = format(parsedDate, "yyyy-MM-dd'T'HH:mm:ssXXX"); // Format ISO 8601
            break;
          }
        } catch (e) {
          console.warn(`‚ö†Ô∏è Nie uda≈Ço siƒô sparsowaƒá daty: ${dateStr} za pomocƒÖ new Date(). B≈ÇƒÖd: ${e}`);
        }
      }
    }

    if (!published_at) {
      console.warn('‚ö†Ô∏è Nie uda≈Ço siƒô znale≈∫ƒá daty publikacji, ustawiam bie≈ºƒÖcƒÖ datƒô.');
      published_at = format(new Date(), "yyyy-MM-dd'T'HH:mm:ssXXX");
    }

    // Generowanie slug√≥w
    const slug_en = slugify(finalTitleEn, { lower: true, strict: true });
    const slug_pl = slugify(finalTitlePl, { lower: true, strict: true });

    console.log(`
‚úÖ Artyku≈Ç scrapowany pomy≈õlnie:
  Tytu≈Ç EN: ${finalTitleEn}
  Tytu≈Ç PL: ${finalTitlePl}
  Kategoria: ${category}
  URL: ${url}
  ≈πr√≥d≈Ço: ${source}
  Data publikacji: ${published_at}
`);

    return {
      title: finalTitleEn,
      content: finalContentEn,
      source,
      url,
      published_at,
      title_pl: finalTitlePl,
      content_pl: finalContentPl,
      slug_en,
      slug_pl,
      category, // Dodano kategoriƒô
    };
  } catch (error) {
    console.error(`‚ùå B≈ÇƒÖd podczas przetwarzania artyku≈Çu ${url}:`);
    if (typeof error === 'object' && error !== null) {
      // Attempt to access properties as if it might be an Axios-like error or standard Error
      const errorAsObject = error as { response?: { status?: unknown }, request?: unknown, message?: unknown };

      if (errorAsObject.response && typeof errorAsObject.response.status === 'number') {
        console.error(`Status: ${errorAsObject.response.status}`);
      } else if (errorAsObject.request) {
        console.error('Brak odpowiedzi z serwera');
      } else if (error instanceof Error) { // Standard Error instance
        console.error('B≈ÇƒÖd:', error.message);
      } else if (typeof errorAsObject.message === 'string') { // Object with a message property
        console.error('B≈ÇƒÖd (wiadomo≈õƒá obiektu):', errorAsObject.message);
      } else {
        console.error('Nieznany b≈ÇƒÖd obiektu:', error); // Log the object itself if no specific properties found
      }
    } else if (typeof error === 'string') { // Handle if a string was thrown
        console.error('B≈ÇƒÖd (string):', error);
    } else {
      // For other primitive types or if it's not an object or string
      console.error('Nieznany typ b≈Çƒôdu:', String(error));
    }
    return null;
  }
}
export async function scrapeGamingArticles() {
  console.log('\n========== ROZPOCZYNAM SCRAPOWANIE ARTYKU≈Å√ìW GAMING ==========');
  
  const sources = [
    {
      name: 'IGN',
      url: 'https://www.ign.com/news',
      selector: 'a[class*="item-body"], a[class*="content-item"], article div > a[href*="/articles/"]', // Updated selectors
      baseUrl: 'https://www.ign.com',
      isAbsolute: true // IGN links are usually absolute from their news page
    },
    {
      name: 'GameSpot',
      url: 'https://www.gamespot.com/news/',
      selector: 'a.card-item__link, article.card-item a[href*="/articles/"]', // Keep existing, add more specific
      baseUrl: 'https://www.gamespot.com',
      isAbsolute: false
    },
    {
      name: 'Polygon',
      url: 'https://www.polygon.com/news', // News section often has good roundups
      selector: 'div.c-compact-entry-box__body a[data-analytics-link="article"], a.c-entry-box--compact__image-wrapper', // Updated selectors
      baseUrl: 'https://www.polygon.com',
      isAbsolute: true // Polygon links are usually absolute
    },
    {
      name: 'Rock Paper Shotgun',
      url: 'https://www.rockpapershotgun.com/news',
      selector: 'a.thumbnail_wrapper, //li/article/a[@href]', // Common selectors for RPS
      baseUrl: 'https://www.rockpapershotgun.com',
      isAbsolute: false // URLs might be relative
    },
    {
      name: 'PC Gamer',
      url: 'https://www.pcgamer.com/news/',
      selector: 'a.article-link, article.article-feature a.article-link', // Selectors for PC Gamer
      baseUrl: 'https://www.pcgamer.com',
      isAbsolute: false // URLs can be relative 
    },
    {
      name: 'Eurogamer',
      url: 'https://www.eurogamer.net/news',
      selector: 'a.block, li.mb-16 a[href*="/news/"]', // Common selectors for Eurogamer article links
      baseUrl: 'https://www.eurogamer.net',
      isAbsolute: false // URLs are often relative
    }
    // Mo≈ºesz dodaƒá wiƒôcej ≈∫r√≥de≈Ç tutaj
  ];

  for (const source of sources) {
    console.log(`\n=== Rozpoczynam scrapowanie z: ${source.name} (${source.url}) ===`);
    try {
      console.log(`\nüîç Pobieram listƒô artyku≈Ç√≥w gaming z: ${source.name}`);
      const response = await axios.get(source.url, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
          'Accept-Language': 'en-US,en;q=0.5',
          'Referer': 'https://www.google.com/',
          'DNT': '1',
        },
        timeout: 15000
      });
      
      const $ = load(response.data);
      const elements = $(source.selector);
      
      console.log(`üîç Znalezione elementy gaming (${elements.length}):`);
      
      if (elements.length === 0) {
        console.log('‚ö†Ô∏è  Nie znaleziono artyku≈Ç√≥w gaming. Mo≈ºliwe, ≈ºe strona wykry≈Ça bota lub zmieni≈Ça strukturƒô HTML.');
        console.log(`Wybrano selektor: ${source.selector} dla ≈∫r√≥d≈Ça ${source.name}`);
      }
      
      for (let i = 0; i < Math.min(elements.length, 5); i++) { // Limit do 5 artyku≈Ç√≥w na ≈∫r√≥d≈Ço
        const element = elements[i];
        let url = $(element).attr('href');
        
        if (!url) {
          console.log('‚ö†Ô∏è Brak URL dla elementu, pomijam...');
          continue;
        }
        
        // Dodaj baseUrl je≈õli URL jest wzglƒôdny
        if (!url.startsWith('http')) {
          if (source.isAbsolute) {
            // This case should ideally not happen if isAbsolute is true and URL isn't starting with http
            // but as a fallback, prepend baseUrl if it's somehow a relative path from an 'absolute' source page
            console.warn(`‚ö†Ô∏è URL ${url} ze ≈∫r√≥d≈Ça ${source.name} (oznaczonego jako isAbsolute) nie zaczyna siƒô od http. Pr√≥ba z baseUrl.`);
            url = source.baseUrl + (url.startsWith('/') ? '' : '/') + url; 
          } else {
            url = source.baseUrl + (url.startsWith('/') ? '' : '/') + url;
          }
        }
        
        console.log(`üîó Przygotowany URL do scrapowania: ${url}`);
        
        const articleData = await scrapeGamingArticle(url, source.name);
        if (!articleData) {
          console.log('‚ö†Ô∏è Nie uda≈Ço siƒô pobraƒá danych artyku≈Çu, pomijam...');
          continue;
        }

        // Sprawd≈∫ czy artyku≈Ç ju≈º istnieje
        const existingArticle = await getExistingGamingArticle(url);
        
        // Je≈õli artyku≈Ç nie istnieje, zapisz go
        if (!existingArticle) {
          try {
            await saveGamingArticle(articleData);
          } catch (error) {
            console.error(`Error saving gaming article: ${error}`);
          }
        }
      }
    } catch (error) {
      console.error(`Error scraping gaming news from ${source.name}: ${error}`);
    }
  }
  
  console.log('\n========== ZAKO≈ÉCZONO SCRAPOWANIE ARTYKU≈Å√ìW GAMING ==========');
}

// async function runScraper() {
//   try {
//     console.log('\nüéÆ Rozpoczynanie skanowania artyku≈Ç√≥w...');
//     await scrapeGamingArticles();
//     console.log('‚úÖ Skanowanie zako≈Ñczone pomy≈õlnie');
//   } catch (error) {
//     console.error('‚ùå B≈ÇƒÖd podczas skanowania artyku≈Ç√≥w:', error);
//   }
// }

// export function startGamingScraper() {
//   console.log('\nüéÆ Rozpoczynam scraper artyku≈Ç√≥w o grach...');
  
//   // Uruchom natychmiast
//   runScraper();
  
//   // Ustaw harmonogram co 6 godzin
//   const interval = 6 * 60 * 60 * 1000; // 6 godzin w milisekundach
//   setInterval(runScraper, interval);
//   console.log(`‚è±Ô∏è Nastƒôpne skanowanie za 6 godzin...`);
// }
